package codeforces;

/* codeforces.com   |   Задание 630G
        Переходящие вымпелы
(Время: 0.5 сек. Память: 64 Мб)
В одной ИТ-компании ввиду урезания бюджета вместо премий была введена новая система нематериальных поощрений сотрудников.

Особо отмечаются два вида действий: исправление критичных багов и предложение новых интересных фич. Человек, исправивший
критичный баг, получает себе на стол вымпел «Исправил критичный баг». Человек, предложивший новую интересную фичу,
получает себе на стол вымпел «Предложил новую фичу».

Ввиду ограниченности бюджета новой системы поощрений было закуплено всего 5 вымпелов «Исправил критичный баг»
и 3 вымпела «Предложил новую фичу».

Чтобы этих вымпелов хватило надолго, их было решено сделать переходящими: когда человек исправляет новый критичный баг,
один из ранее распределённых вымпелов «Исправил критичный баг» переходит ему на стол. Когда человек предлагает новую интересную фичу, один из ранее распределённых вымпелов «Предложил новую фичу» переходит ему на стол.

У одного человека на столе может стоять несколько вымпелов одного типа и, разумеется, могут стоять вымпелы обоих типов.
Всего в ИТ-компании n столов. Найдите количество способов распределения описанных вымпелов по этим столам, если известно, что каждый из вымпелов находится на каком-то из столов, и каждый стол достаточно велик, чтобы содержать любое количество вымпелов.


Входные данные
Единственная строка входных данных содержит одно целое число n (1 ≤ n ≤ 500) — количество столов в ИТ-компании.

Выходные данные
Выведите одно целое число — количество способов расставить вымпелы по n столам.


Пример:
---------------------------------
|№ |  INPUT.TXT  |  OUTPUT.TXT  |
|-------------------------------|
|1 |2            |24            |
---------------------------------



Решение.
Вариантов разместить 3 вымпела с повторениями на n столов = C(n+3-1, 3).
Вариантов разместить 5 вымпела с повторениями на n столов = C(n+5-1, 5).
Вымпелы разных видов независимы.
Ответ: C(n+2, 3) * C(n+4, 5)
*/

import java.util.Scanner;

public class Ex_630G {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        long n = in.nextLong();
        long c3 = (n+2) * (n+1) * n / 6;
        long c5 = (n+4) * (n+3) * (n+2) * (n+1) * n / 120;
        System.out.print(c3 * c5);
    }
}
