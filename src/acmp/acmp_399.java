package acmp;

/* acmp.ru   |   Задание №399
		Жук
(Время: 1 сек. Память: 16 Мб Сложность: 30%)
Петя нашел в Интернете по адресу <a href="http://buglab.ru" target="_blank"><b>http://buglab.ru</b></a> игру-головоломку "Жук", в которой от участников требуется построить для жука лабиринт таким образом, чтобы жук как можно дольше искал выход.

Жук всегда начинает свое движение с левого верхнего угла, а выход всегда находится в правом нижнем. Жук движется не оптимально, а следующим образом: он идет туда, где еще не был, либо был там реже. Т.е. проходя каждую клетку лабиринта, жук запоминает: сколько раз он был в этой клетке и при обдумывании направления своего движения в какой то конкретный момент он смотрит: сколько раз он был в клетке снизу, сколько справа, сколько слева и сколько сверху и движется туда, где он был меньше раз. Если таких направлений несколько и одно из них совпадает с текущим направлением движения, то он не меняет направления, иначе он движется согласно следующим приоритетам: вниз, направо, вверх, налево. Т.е. если минимальное число посещений сразу справа и слева (а двигался он при этом вверх или вниз), то жук идет направо, т.к. у "направо" приоритет выше. Следует заметить, что двигаясь по данному алгоритму жук всегда достигнет выхода в том случае, когда выход существует.

Изучив алгоритм движения жука Петя хочет написать программу, которая по заданному лабиринту определит количество перемещений жука прежде, чем он достигнет выхода. Помогите Пете с реализацией данной программы!

Пример:
----------------------------------------------
|№ |     INPUT.TXT      |     OUTPUT.TXT     |
|--|--------------------|--------------------|
|--|--------------------|--------------------|
|  |6 6                 |20                  |
|  | @@@@@@             |                    |
|  | @&nbsp;&nbsp;&nbsp;&nbsp;@|                    |
|1 | @&nbsp;&nbsp;&nbsp;&nbsp;@|                    |
|  | @&nbsp;@&nbsp;@@   |                    |
|  | @&nbsp;@&nbsp;&nbsp;@|                    |
|  | @@@@@@             |                    |
|--|--------------------|--------------------|
|  |8 30                |630                 |
|  | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|                    |
|  | @&nbsp;&nbsp;&nbsp;@&nbsp;&nbsp;&nbsp;&nbsp;@&nbsp;@@@@&nbsp;@&nbsp;&nbsp;@&nbsp;@@@@&nbsp;@@&nbsp;@|                    |
|  | @&nbsp;@&nbsp;@@&nbsp;@&nbsp;&nbsp;@&nbsp;@&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@&nbsp;@&nbsp;@&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@|                    |
|2 | @&nbsp;&nbsp;&nbsp;@&nbsp;&nbsp;@&nbsp;@&nbsp;@@&nbsp;&nbsp;@@&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@@&nbsp;@@|                    |
|  | @&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@&nbsp;@@|                    |
|  | @&nbsp;@&nbsp;&nbsp;@@&nbsp;@&nbsp;@&nbsp;&nbsp;&nbsp;@@@&nbsp;&nbsp;@&nbsp;&nbsp;@&nbsp;&nbsp;&nbsp;@&nbsp;&nbsp;@|                    |
|  | @&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@&nbsp;&nbsp;&nbsp;@&nbsp;&nbsp;@&nbsp;&nbsp;&nbsp;&nbsp;@&nbsp;&nbsp;&nbsp;@&nbsp;@@&nbsp;&nbsp;&nbsp;@|                    |
|  | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|                    |
|--|--------------------|--------------------|
|  |4 4                 |-1                  |
|  | @@@@               |                    |
|3 | @&nbsp;@@          |                    |
|  | @@&nbsp;@          |                    |
|  | @@@@               |                    |
|--|--------------------|--------------------|
----------------------------------------------



Решение.

*/


import java.util.Scanner;

public class acmp_399 {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		System.out.print("");
	}
}